#! node
// This file generates HTML that ultimately gets injected into our index.html ejs template.
// The generated HTML has script/link references to our application's Javascripts, along with each's hashes. 
// See: https://content-security-policy.com/hash/
import * as path from 'path';
import { createReadStream } from 'node:fs';
import { createHash } from 'node:crypto';

import { argparser } from './build-script-hashes.argparser';

const generateHashForScript = async (scriptName: string): Promise<string> => {
  return new Promise((resolve) => {
    const hash = createHash('sha256');

    const input = createReadStream(path.resolve(process.cwd(), `./dist.frontend/${scriptName}`));
    input.on('readable', () => {
      const data = input.read();

      if (!data) { return resolve(hash.digest('base64')); }
      
      hash.update(data);
    });
  });
}

const scriptsToHash: Record<string, string> = {
  // Most of these dependencies are generated by webpack in sqlite-wasm-http, unfortunately.
  // FIXME We could not successfully bundle them using esbuild (see notes in makefile),
  //  so include them like so for now.
  'vendors-node_modules_lru-cache_index_mjs.bundle.js': 'script',
  'dist_vfs-http_js-dist_vfs-sync-http_js.bundle.js': 'script',
  'main.bundle.js': 'script', // All our esbuild-bundled dependencies.
  'deps_dist_sqlite3-bundler-friendly_mjs.bundle.js': 'link',
  'deps_dist_sqlite3-opfs-async-proxy_js.bundle.js': 'link',
  'dist_sqlite-worker_js.bundle.js': 'link',
  'dist_vfs-http-worker_js.bundle.js': 'link',
  'bundle.website.js': 'script'
};

const hashesByScriptName: Record<string, string> = {}

let templateHTML = '';
for (const scriptName in scriptsToHash) {
  const hash = await generateHashForScript(scriptName);

  hashesByScriptName[scriptName] = hash;

  if (argparser.args['app-location'] === 'aws') {
    if (scriptsToHash[scriptName] === 'script') {
      templateHTML += `<script defer src='${scriptName}' integrity='sha256-${hash}'></script>\r\n`;
    } else {
      templateHTML += `<link href='${scriptName}' integrity='sha256-${hash}' rel='preload' as='script'>\r\n`;
    }
  } else {
    // Not using HTTPs so not including integrity check. See: https://stackoverflow.com/questions/50523151/firefox-none-of-the-sha256-hashes-in-the-integrity-attribute-match-the-conte
    if (scriptsToHash[scriptName] === 'script') {
      templateHTML += `<script defer src='${scriptName}'></script>\r\n`;
    } else {
      templateHTML += `<link href='${scriptName}' rel='preload' as='script'>\r\n`;
    }
  }
}

console.log(templateHTML);